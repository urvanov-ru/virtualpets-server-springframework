<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task.xsd">

    <!-- Root Context: defines shared resources visible to all other web 
        components -->

    <import resource="properties.xml" />
    <import resource="servlet-jee.xml" />
    <import resource="servlet-tx.xml" />


    <bean id="version" class="java.lang.String">
        <constructor-arg value="0.21" />
    </bean>
    
    <bean id = "clock" class = "java.time.Clock"
            factory-method = "systemDefaultZone" />


    <bean id="conversionService"
        class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.PetTypeServerToSharedConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.PetTypeSharedToServerConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.RoleServerToSharedConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.RoleSharedToServerConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.FoodTypeServerToSharedConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.FoodTypeSharedToServerConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.ClothTypeServerToSharedConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.ClothTypeSharedToServerConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.SexServerToSharedConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.SexSharedToServerConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.BuildingMaterialTypeServerToSharedConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.BuildingMaterialTypeSharedToServerConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.DrinkTypeServerToSharedConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.DrinkTypeSharedToServerConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.JournalEntryTypeSharedToServerConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.JournalEntryTypeServerToSharedConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.AchievementCodeServerToSharedConverter" />
                <bean
                    class="ru.urvanov.virtualpets.server.convserv.AchievementCodeSharedToServerConverter" />
            </set>
        </property>
    </bean>
    
    <bean class="ru.urvanov.virtualpets.server.example.InjectExample">
        <property name="names">
            <list>
                <value>Вася</value>
                <value>Шурик</value>
                <value>Оксана</value>
                <value>Семён</value>
                <ref bean="version" />
                <bean class="java.lang.String">
                    <constructor-arg value="Святослав-Бинов" />
                </bean>
            </list>
        </property>
        <property name="numberSumMap">
            <map>
                <entry key="D-001" value="100.00" />
                <entry key="D-002" value="55.01" />
                <entry key="D-003" value="34.23" />
                <entry>
                    <key>
                        <ref bean="version"/>
                    </key>
                    <value>1000.00</value>
                </entry>
                <entry key="D-005">
                    <bean class="java.math.BigDecimal">
                        <constructor-arg value = "100000.00" />
                    </bean>
                </entry>
            </map>
        </property>
    </bean>
    
    <!-- Примеры аспектно-ориентированного программирования -->

    <bean id = "schemaBasedAdvice" class="ru.urvanov.virtualpets.server.example.SchemaBasedAdvice" />
    
    <aop:config>
        <aop:aspect id="beforeAspectExample" ref="schemaBasedAdvice">
            <aop:pointcut id="beforeDaoPointcut"
                expression="execution(* ru.urvanov.virtualpets.server.dao.*.*(..))" />
            <aop:before pointcut-ref="beforeDaoPointcut"
                method = "beforeDaoAdvice" />

            <aop:after-returning
                pointcut="execution(* ru.urvanov.virtualpets.server.service.HiddenObjectsServiceImpl.joinGame(..))"
                method = "afterJoinGameReturningAdvice"
                returning="hiddenObjectsGame" />
            
            <aop:after-throwing
                pointcut="execution(* ru.urvanov.virtualpets.server.service.RoomServiceImpl.build*(..))"
                throwing = "throwableParameter"
                method = "afterBuildThrowingAdvice" />
            
            <aop:after
                pointcut="execution(* ru.urvanov.virtualpets.server.service.RoomServiceImpl.build*(..))"
                method = "afterBuildAdvice" />
            
            <aop:around
                pointcut="execution(* ru.urvanov.virtualpets.server.service.RoomServiceImpl.openBoxNewbie(..))"
                method = "aroundOpenBoxNewbieAdvice" />
        </aop:aspect>
    </aop:config>
    
    <aop:aspectj-autoproxy />
    
    <bean class = "ru.urvanov.virtualpets.server.example.AnnotationBasedAspect" />
    
    <!-- *** -->
    
    
    <bean class="ru.urvanov.virtualpets.server.example.InitDestroyExample"
            init-method = "initMethodFromXmlConfiguration"
            destroy-method = "destroyMethodFromXmlConfiguration" />

    

    <bean id = "mailSender"
        class = "org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
            </props>
        </property>
        <property name="host"
            value = "${virtualpets-server-springframework.mail.host}" />
        <property name="port"
            value = "${virtualpets-server-springframework.mail.port}" />
        <property name="username"
           value="${virtualpets-server-springframework.mail.username}"/>
        <property name="password"
           value="${virtualpets-server-springframework.mail.password}"/>
    </bean>
    <!-- this is a template message that we can pre-load with default state -->
    <bean id="templateMessage"
            class = "org.springframework.mail.SimpleMailMessage">
        <property name = "from"
        value = "${virtualpets-server-springframework.mail.from}" />
        <property name = "subject" value = "Recover password" />
    </bean>

    <context:component-scan
            base-package = "ru.urvanov.virtualpets.server.dao,
                          ru.urvanov.virtualpets.server.service
            " />

    <task:scheduler id="sheduler" pool-size="1" />

    <task:scheduled-tasks scheduler="sheduler">
        <task:scheduled ref="petService" method="updatePetsTask"
            fixed-delay="3600000" />
    </task:scheduled-tasks>
</beans>
